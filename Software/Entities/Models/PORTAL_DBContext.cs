// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Entities.Models;

public partial class PORTAL_DBContext : DbContext
{
    public PORTAL_DBContext()
    {
    }

    public PORTAL_DBContext(DbContextOptions<PORTAL_DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Buyer> Buyers { get; set; }

    public virtual DbSet<CSiteImage> CSiteImages { get; set; }

    public virtual DbSet<CSiteIssue> CSiteIssues { get; set; }

    public virtual DbSet<CSiteTask> CSiteTasks { get; set; }

    public virtual DbSet<CSiteTaskStep> CSiteTaskSteps { get; set; }

    public virtual DbSet<ConstructionSite> ConstructionSites { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeAssignmentCSite> EmployeeAssignmentCSites { get; set; }

    public virtual DbSet<File> Files { get; set; }

    public virtual DbSet<GlassConfiguration> GlassConfigurations { get; set; }

    public virtual DbSet<GlassForSubproject> GlassForSubprojects { get; set; }

    public virtual DbSet<GlassPiece> GlassPieces { get; set; }

    public virtual DbSet<GlassType> GlassTypes { get; set; }

    public virtual DbSet<GlazedGlass> GlazedGlasses { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Issue> Issues { get; set; }

    public virtual DbSet<IssueImage> IssueImages { get; set; }

    public virtual DbSet<Note> Notes { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrnamentGlass> OrnamentGlasses { get; set; }

    public virtual DbSet<OrnamentSpacer> OrnamentSpacers { get; set; }

    public virtual DbSet<OtherSupplier> OtherSuppliers { get; set; }

    public virtual DbSet<Panel> Panels { get; set; }

    public virtual DbSet<ProfileSupplier> ProfileSuppliers { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<Spacer> Spacers { get; set; }

    public virtual DbSet<Step> Steps { get; set; }

    public virtual DbSet<Subproject> Subprojects { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<Tool> Tools { get; set; }

    public virtual DbSet<ToolAssignmentCsite> ToolAssignmentCsites { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<VehicleAssignmentCSite> VehicleAssignmentCSites { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=portalgrupa.database.windows.net;Initial Catalog=PORTAL_DB;Persist Security Info=True;User ID=portal_admin;Password=eutUu3i94XD!P$G;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Buyer>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Buyer__3213E83FED154166");

            entity.ToTable("Buyer");

            entity.Property(e => e.adress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.city)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.company)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.country)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.email)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CSiteImage>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__CSiteIma__3213E83F8ADEF152");

            entity.ToTable("CSiteImage");

            entity.Property(e => e.imageData)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.imagePath)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.imageType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.uploadDate).HasColumnType("date");

            entity.HasOne(d => d.cSiteIssue).WithMany(p => p.CSiteImages)
                .HasForeignKey(d => d.cSiteIssue_id)
                .HasConstraintName("FKCSiteImage668016");

            entity.HasOne(d => d.cSiteTask).WithMany(p => p.CSiteImages)
                .HasForeignKey(d => d.cSiteTask_id)
                .HasConstraintName("FKCSiteImage481070");
        });

        modelBuilder.Entity<CSiteIssue>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__CSiteIss__3213E83FC1267DE7");

            entity.ToTable("CSiteIssue");

            entity.Property(e => e.dateOfClosing).HasColumnType("date");
            entity.Property(e => e.dateOfSubmission).HasColumnType("date");
            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.dueDate).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.priority)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.constructionSite).WithMany(p => p.CSiteIssues)
                .HasForeignKey(d => d.constructionSite_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCSiteIssue562067");
        });

        modelBuilder.Entity<CSiteTask>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__CSiteTas__3213E83F4C1B01FA");

            entity.ToTable("CSiteTask");

            entity.Property(e => e.dateOfClosing).HasColumnType("date");
            entity.Property(e => e.dateOfSubmission).HasColumnType("date");
            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.dueDate).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.priority)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.constructionSite).WithMany(p => p.CSiteTasks)
                .HasForeignKey(d => d.constructionSite_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCSiteTask808545");
        });

        modelBuilder.Entity<CSiteTaskStep>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__CSiteTas__3213E83F1793F834");

            entity.ToTable("CSiteTaskStep");

            entity.Property(e => e.description)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.cSiteTask).WithMany(p => p.CSiteTaskSteps)
                .HasForeignKey(d => d.cSiteTask_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCSiteTaskS211772");
        });

        modelBuilder.Entity<ConstructionSite>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Construc__3213E83F8EF55950");

            entity.ToTable("ConstructionSite");

            entity.Property(e => e.adress)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.city)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.country)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.dueDate).HasColumnType("date");
            entity.Property(e => e.endDate).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.startDate).HasColumnType("date");

            entity.HasOne(d => d.employeeResponsible).WithMany(p => p.ConstructionSites)
                .HasForeignKey(d => d.employeeResponsible_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKConstructi724459");

            entity.HasOne(d => d.project).WithMany(p => p.ConstructionSites)
                .HasForeignKey(d => d.project_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKConstructi605480");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Employee__3213E83F3CA9CCC6");

            entity.ToTable("Employee");

            entity.Property(e => e.adress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.bankAccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.city)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.country)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.surname)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeAssignmentCSite>(entity =>
        {
            entity.HasKey(e => new { e.ConstructionSiteid, e.Employeeid });

            entity.ToTable("EmployeeAssignmentCSite");

            entity.Property(e => e.assignmentEndDate).HasColumnType("date");
            entity.Property(e => e.assignmentStartDate).HasColumnType("date");

            entity.HasOne(d => d.ConstructionSite).WithMany(p => p.EmployeeAssignmentCSites)
                .HasForeignKey(d => d.ConstructionSiteid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKEmployeeAs974082");

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeAssignmentCSites)
                .HasForeignKey(d => d.Employeeid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKEmployeeAs373115");
        });

        modelBuilder.Entity<File>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__File__3213E83FC7CED5D7");

            entity.ToTable("File");

            entity.Property(e => e.description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.fileData)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.filePath)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.fileSize)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.fileType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.projectType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.uploadDate).HasColumnType("date");

            entity.HasOne(d => d.project).WithMany(p => p.Files)
                .HasForeignKey(d => d.project_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKFile435123");
        });

        modelBuilder.Entity<GlassConfiguration>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__GlassCon__3213E83F5E16F1D6");

            entity.ToTable("GlassConfiguration");

            entity.Property(e => e.configuration)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.shortName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GlassForSubproject>(entity =>
        {
            entity.HasKey(e => e.glassProject_id).HasName("PK__GlassFor__C67C6A602A0379CE");

            entity.ToTable("GlassForSubproject");

            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.subproject).WithMany(p => p.GlassForSubprojects)
                .HasForeignKey(d => d.subproject_id)
                .HasConstraintName("FKGlassForSu68314");
        });

        modelBuilder.Entity<GlassPiece>(entity =>
        {
            entity.ToTable("GlassPiece");

            entity.Property(e => e.id).ValueGeneratedNever();

            entity.HasOne(d => d.GlazedGlass).WithMany(p => p.GlassPieces)
                .HasForeignKey(d => d.GlazedGlassid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKGlassPiece505007");
        });

        modelBuilder.Entity<GlassType>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__GlassTyp__3213E83FAAE7409F");

            entity.ToTable("GlassType");

            entity.Property(e => e.glassThicknesses)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.shortName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GlazedGlass>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__GlazedGl__3213E83F0F5B7392");

            entity.ToTable("GlazedGlass");

            entity.Property(e => e.position)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.glassConfiguration).WithMany(p => p.GlazedGlasses)
                .HasForeignKey(d => d.glassConfiguration_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKGlazedGlas78247");

            entity.HasOne(d => d.glassProject).WithMany(p => p.GlazedGlasses)
                .HasForeignKey(d => d.glassProject_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKGlazedGlas297920");

            entity.HasOne(d => d.hasOrnamentGlassNavigation).WithMany(p => p.GlazedGlasses)
                .HasForeignKey(d => d.hasOrnamentGlass)
                .HasConstraintName("FK_GlazedGlass_OrnamentGlass");

            entity.HasOne(d => d.hasOrnamentSpacerNavigation).WithMany(p => p.GlazedGlasses)
                .HasForeignKey(d => d.hasOrnamentSpacer)
                .HasConstraintName("FK_GlazedGlass_OrnamentSpacer");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Image__3213E83FE090A87E");

            entity.ToTable("Image");

            entity.Property(e => e.caption)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.imageData).HasColumnType("image");
            entity.Property(e => e.imageType)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Issue>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Issue__3213E83FEA2671ED");

            entity.ToTable("Issue");

            entity.Property(e => e.dateOfClosing).HasColumnType("date");
            entity.Property(e => e.dateOfSubmission).HasColumnType("date");
            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.dueDate).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.priority)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.subproject).WithMany(p => p.Issues)
                .HasForeignKey(d => d.subproject_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKIssue531462");
        });

        modelBuilder.Entity<IssueImage>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__IssueIma__3213E83F6697FD56");

            entity.ToTable("IssueImage");

            entity.Property(e => e.imageData)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.imagePath)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.imageType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.uploadDate).HasColumnType("date");

            entity.HasOne(d => d.issue).WithMany(p => p.IssueImages)
                .HasForeignKey(d => d.issue_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKIssueImage2806");
        });

        modelBuilder.Entity<Note>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Note__3213E83F20B51317");

            entity.ToTable("Note");

            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.projectType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.text)
                .HasMaxLength(3000)
                .IsUnicode(false);

            entity.HasOne(d => d.project).WithMany(p => p.Notes)
                .HasForeignKey(d => d.project_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKNote190781");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Notifica__3213E83F358A4876");

            entity.ToTable("Notification");

            entity.Property(e => e.date).HasColumnType("date");
            entity.Property(e => e.dueDate).HasColumnType("date");
            entity.Property(e => e.message)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.priority)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.projectType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.title)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false);

            entity.HasOne(d => d.project).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.project_id)
                .HasConstraintName("FKNotificati929200");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Order__3213E83F721AFE32");

            entity.ToTable("Order");

            entity.Property(e => e.dateOfOrder).HasColumnType("date");
            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.expectedDateOfOrder).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.projectType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.otherSupplier).WithMany(p => p.Orders)
                .HasForeignKey(d => d.otherSupplier_id)
                .HasConstraintName("FKOrder110465");

            entity.HasOne(d => d.profileSupplier).WithMany(p => p.Orders)
                .HasForeignKey(d => d.profileSupplier_id)
                .HasConstraintName("FKOrder633634");

            entity.HasOne(d => d.subproject).WithMany(p => p.Orders)
                .HasForeignKey(d => d.subproject_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOrder35020");

            entity.HasOne(d => d.user).WithMany(p => p.Orders)
                .HasForeignKey(d => d.user_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKOrder166368");
        });

        modelBuilder.Entity<OrnamentGlass>(entity =>
        {
            entity.ToTable("OrnamentGlass");

            entity.Property(e => e.id).ValueGeneratedNever();
            entity.Property(e => e.glassThicknesses)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrnamentSpacer>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Ornament__3213E83F514CA5B8");

            entity.ToTable("OrnamentSpacer");

            entity.Property(e => e.color)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OtherSupplier>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__OtherSup__3213E83F0F69BA55");

            entity.ToTable("OtherSupplier");

            entity.Property(e => e.adress)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.city)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.country)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.email)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.supplies)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Panel>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Panel__3213E83F4CCDB197");

            entity.ToTable("Panel");

            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProfileSupplier>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__ProfileS__3213E83F0B6C5DE5");

            entity.ToTable("ProfileSupplier");

            entity.Property(e => e.adress)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.city)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.country)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.email)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.suppliesType)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Project__3213E83FAA1064E2");

            entity.ToTable("Project");

            entity.Property(e => e.dueDate).HasColumnType("date");
            entity.Property(e => e.endDate).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.priority)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.startDate).HasColumnType("date");
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.buyer).WithMany(p => p.Projects)
                .HasForeignKey(d => d.buyer_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKProject266823");
        });

        modelBuilder.Entity<Spacer>(entity =>
        {
            entity.ToTable("Spacer");

            entity.Property(e => e.id).ValueGeneratedNever();
            entity.Property(e => e.listOfPossibleThickness)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Step>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Step__3213E83F5EAC9A5F");

            entity.ToTable("Step");

            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.task).WithMany(p => p.Steps)
                .HasForeignKey(d => d.task_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKStep52027");
        });

        modelBuilder.Entity<Subproject>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Subproje__3213E83FDA92FDB4");

            entity.ToTable("Subproject");

            entity.Property(e => e.colorOfFrame)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colorOfWing)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.profile)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.projectType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.project).WithMany(p => p.Subprojects)
                .HasForeignKey(d => d.project_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSubproject742414");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Task__3213E83FEA6850AB");

            entity.ToTable("Task");

            entity.Property(e => e.dateOfClosing).HasColumnType("date");
            entity.Property(e => e.dateOfSubmission).HasColumnType("date");
            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.dueDate).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.priority)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.status)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.subproject).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.subproject_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTask889438");
        });

        modelBuilder.Entity<Tool>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Tool__3213E83FDBEDA5B6");

            entity.ToTable("Tool");

            entity.HasIndex(e => e.serial_number, "UQ__Tool__BED14FEE3ECD8C7D").IsUnique();

            entity.Property(e => e.manufacturer)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.serial_number)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.type)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.warrantyExpiry).HasColumnType("date");
        });

        modelBuilder.Entity<ToolAssignmentCsite>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__ToolAssi__3213E83F2A1C2E37");

            entity.ToTable("ToolAssignmentCsite");

            entity.Property(e => e.assignmentEndDate).HasColumnType("date");
            entity.Property(e => e.assignmentStartDate).HasColumnType("date");

            entity.HasOne(d => d.constructionSite).WithMany(p => p.ToolAssignmentCsites)
                .HasForeignKey(d => d.constructionSite_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKToolAssign140824");

            entity.HasOne(d => d.employeeAssignedTo).WithMany(p => p.ToolAssignmentCsites)
                .HasForeignKey(d => d.employeeAssignedTo_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKToolAssign949004");

            entity.HasOne(d => d.tool).WithMany(p => p.ToolAssignmentCsites)
                .HasForeignKey(d => d.tool_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKToolAssign346760");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.user_id).HasName("PK__User__B9BE370FA9967AEB");

            entity.ToTable("User");

            entity.Property(e => e.password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.username)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Vehicle__3213E83F25F2476E");

            entity.ToTable("Vehicle");

            entity.Property(e => e.assignedTo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.fuelType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.licensePlate)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.manufacturer)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.model)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.registrationValidTo).HasColumnType("date");
        });

        modelBuilder.Entity<VehicleAssignmentCSite>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__VehicleA__3213E83FF3F0FEA8");

            entity.ToTable("VehicleAssignmentCSite");

            entity.Property(e => e.assignmentEndDate).HasColumnType("date");
            entity.Property(e => e.assignmentStartDate).HasColumnType("date");
            entity.Property(e => e.purpose)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.constructionSite).WithMany(p => p.VehicleAssignmentCSites)
                .HasForeignKey(d => d.constructionSite_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKVehicleAss981008");

            entity.HasOne(d => d.employeeAssignedTo).WithMany(p => p.VehicleAssignmentCSites)
                .HasForeignKey(d => d.employeeAssignedTo_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKVehicleAss789189");

            entity.HasOne(d => d.vehicle).WithMany(p => p.VehicleAssignmentCSites)
                .HasForeignKey(d => d.vehicle_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKVehicleAss626075");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}